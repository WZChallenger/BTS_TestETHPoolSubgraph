// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Claim extends EthereumEvent {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deposit extends EthereumEvent {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositRewards extends EthereumEvent {
  get params(): DepositRewards__Params {
    return new DepositRewards__Params(this);
  }
}

export class DepositRewards__Params {
  _event: DepositRewards;

  constructor(event: DepositRewards) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Receive extends EthereumEvent {
  get params(): Receive__Params {
    return new Receive__Params(this);
  }
}

export class Receive__Params {
  _event: Receive;

  constructor(event: Receive) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RoleAdminChanged extends EthereumEvent {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends EthereumEvent {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends EthereumEvent {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ETHPool__getUserInfosResultReturnDataStruct extends EthereumTuple {
  get totalDepositedAmount(): BigInt {
    return this[0].toBigInt();
  }

  get pendingRewards(): BigInt {
    return this[1].toBigInt();
  }

  get depositedAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class ETHPool__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ETHPool extends SmartContract {
  static bind(address: Address): ETHPool {
    return new ETHPool("ETHPool", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call("DEFAULT_ADMIN_ROLE", []);

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("DEFAULT_ADMIN_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  TEAM_ROLE(): Bytes {
    let result = super.call("TEAM_ROLE", []);

    return result[0].toBytes();
  }

  try_TEAM_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("TEAM_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getBalance(): BigInt {
    let result = super.call("getBalance", []);

    return result[0].toBigInt();
  }

  try_getBalance(): CallResult<BigInt> {
    let result = super.tryCall("getBalance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getRewards(addr: Address): BigInt {
    let result = super.call("getRewards", [EthereumValue.fromAddress(addr)]);

    return result[0].toBigInt();
  }

  try_getRewards(addr: Address): CallResult<BigInt> {
    let result = super.tryCall("getRewards", [EthereumValue.fromAddress(addr)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", [
      EthereumValue.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getRoleAdmin", [
      EthereumValue.fromFixedBytes(role)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getUserAddrs(): Array<Address> {
    let result = super.call("getUserAddrs", []);

    return result[0].toAddressArray();
  }

  try_getUserAddrs(): CallResult<Array<Address>> {
    let result = super.tryCall("getUserAddrs", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }

  getUserCount(): BigInt {
    let result = super.call("getUserCount", []);

    return result[0].toBigInt();
  }

  try_getUserCount(): CallResult<BigInt> {
    let result = super.tryCall("getUserCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getUserInfos(): Array<ETHPool__getUserInfosResultReturnDataStruct> {
    let result = super.call("getUserInfos", []);

    return result[0].toTupleArray<
      ETHPool__getUserInfosResultReturnDataStruct
    >();
  }

  try_getUserInfos(): CallResult<
    Array<ETHPool__getUserInfosResultReturnDataStruct>
  > {
    let result = super.tryCall("getUserInfos", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTupleArray<ETHPool__getUserInfosResultReturnDataStruct>()
    );
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", [
      EthereumValue.fromFixedBytes(role),
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): CallResult<boolean> {
    let result = super.tryCall("hasRole", [
      EthereumValue.fromFixedBytes(role),
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call("supportsInterface", [
      EthereumValue.fromFixedBytes(interfaceId)
    ]);

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): CallResult<boolean> {
    let result = super.tryCall("supportsInterface", [
      EthereumValue.fromFixedBytes(interfaceId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  userAddrs(param0: BigInt): Address {
    let result = super.call("userAddrs", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_userAddrs(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("userAddrs", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  userInfo(param0: Address): ETHPool__userInfoResult {
    let result = super.call("userInfo", [EthereumValue.fromAddress(param0)]);

    return new ETHPool__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userInfo(param0: Address): CallResult<ETHPool__userInfoResult> {
    let result = super.tryCall("userInfo", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ETHPool__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTeamMemberCall extends EthereumCall {
  get inputs(): AddTeamMemberCall__Inputs {
    return new AddTeamMemberCall__Inputs(this);
  }

  get outputs(): AddTeamMemberCall__Outputs {
    return new AddTeamMemberCall__Outputs(this);
  }
}

export class AddTeamMemberCall__Inputs {
  _call: AddTeamMemberCall;

  constructor(call: AddTeamMemberCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTeamMemberCall__Outputs {
  _call: AddTeamMemberCall;

  constructor(call: AddTeamMemberCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends EthereumCall {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class DepositCall extends EthereumCall {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositRewardsCall extends EthereumCall {
  get inputs(): DepositRewardsCall__Inputs {
    return new DepositRewardsCall__Inputs(this);
  }

  get outputs(): DepositRewardsCall__Outputs {
    return new DepositRewardsCall__Outputs(this);
  }
}

export class DepositRewardsCall__Inputs {
  _call: DepositRewardsCall;

  constructor(call: DepositRewardsCall) {
    this._call = call;
  }
}

export class DepositRewardsCall__Outputs {
  _call: DepositRewardsCall;

  constructor(call: DepositRewardsCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends EthereumCall {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class RemoveTeamMemberCall extends EthereumCall {
  get inputs(): RemoveTeamMemberCall__Inputs {
    return new RemoveTeamMemberCall__Inputs(this);
  }

  get outputs(): RemoveTeamMemberCall__Outputs {
    return new RemoveTeamMemberCall__Outputs(this);
  }
}

export class RemoveTeamMemberCall__Inputs {
  _call: RemoveTeamMemberCall;

  constructor(call: RemoveTeamMemberCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveTeamMemberCall__Outputs {
  _call: RemoveTeamMemberCall;

  constructor(call: RemoveTeamMemberCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends EthereumCall {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends EthereumCall {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}
